	
	Lokasenna_GUI 2.0 - Building classes
	
This file will hopefully provide all of the information you need to
build your own classes for use with Lokasenna_GUI.




Classes, in Lua, are really just tables that have been set up to reference
a different table in the event that they don't contain a requested value. 
That is:

	- A Person is human, with skin but no wings
	
	- Susan is female, with blonde hair and green eyes
	
Does Susan have wings? We don't know, because Susan's description doesn't 
tell us. We can do this instead:
	
	- Susan is a Person, female, with blonde hair and green eyes
		
Susan's description still doesn't tell us, but since we know that she's
a Person we can look and see that people do not, in fact, have wings.
	
(If you'd like a more detailed description of this behavior, do a Google
search for "lua classes metatables" and try not to fall asleep.)




For our purposes, your class just needs to reference GUI.Element like so:
	
	GUI.Thing = GUI.Element:new()
	
GUI.Element doesn't do much of anything; it exists simply to keep the script
from crashing when it goes to look for a method you didn't add.

'Methods' are a programming term that refers to the actions a class can
perform. i.e.

	Person:walk(2 feet, east)
	Person:sleep(4 hours)




The first method a class needs is a way to store all of its parameters, and
for it know that it is, in fact, part of a class:

	function GUI.Thing:new(name, z, x, y, ...whatever parameters you want...)
	
		local Thing = {}
		
		Thing.name = name
		Thing.z = z
		Thing.x, Thing.y = x, y
		
		Thing.optional_parameter = optional_parameter or 5
		
		Thing.internal_value = human_readable_value * (2 / math.pi)
		
		Thing.retval = human_readable_value
		
		
		setmetatable(Thing, self)
		self.__index = self
		return Thing
	
	end
	
That last bit tells our temporary Thing to use 'self' as a backup if it 
can't find a value or method. Because this function uses a : up top, 'self' 
is included as a hidden variable referring to whatever called it.
                                
    i.e. GUI.Thing:new()..... 'self' refers to GUI.Thing

By giving the temporary Thing instructions to look up GUI.Thing, we've 
created a new, independent copy of our base class. It can be modified, told 
to do stuff, even rewritten, and other Things won't be affected. If any of 
them are asked for a value they don't have, they'll look at their class for 
an answer.



Many elements will want to do a bit of prep work when first created, such
as getting a buffer and drawing themselves to it for blitting later. The
'init' method is called:
	a) 	When GUI.Init() opens the window, for all elements that have been
		created at the time.
	b)	When any element is created after that.
	
	function GUI.Thing:init()
	
		self.buffers = GUI.GetBuffer(3)
	
		...draw some stuff to the buffers...
		
		if self.caption ~= "" then
		
			GUI.font(self.font)
			self.cap_w, cap_h = gfx.measurestr(self.caption)
			
		end
		
	end
	
The call to GUI.GetBuffer simply asks the GUI logic to assign 3 graphics
buffers to this element so that there's no risk of other elements drawing
in them. Classes can also have a common buffer for all child elements, for
instance if your buttons are all going to be the same color and size. In
this case, you would assign the buffer to the class as a whole:

	GUI.Thing = GUI.Element:new()
	GUI.Thing.buffers = GUI.GetBuffer(2)
	
	function GUI.Thing:new(....)
		...etc...
	end
	
Because of the metatable stuff, an element looking for 'self.buffer' will 
come up blank and go looking to see if GUI.Thing.buffer exists.




Classes probably need to be able to draw themselves, right? This method is
called any time the element's z layer is asked to redraw.

	function GUI.Thing:draw()
	
		gfx.rect(self.x, self.y, self.w, self.h)
        
		gfx.x, gfx.y = self.x, self.y
		gfx.drawstr(self.caption)		
	
	end

If your class made use of a buffer to pre-draw a few things, you instead have
to copy ('blit' being the computer term) the buffer's contents (or simply part 
of it) to the main drawing area.

    function GUI.Thing:draw()

        gfx.blit(self.buff[1], 1, 0)
        gfx.blit(self.buff[2], 1, 0)        
        
 		gfx.x, gfx.y = self.x, self.y
		gfx.drawstr(self.caption)       
    end




It's also perfectly fine to use a combination of blitting and drawing - most 
of the GUI classes here do. The Slider class, for instance:

:init()
- Draws the background track to self.buffs[1]
- Draws a single slider handle to self.buffs[2]

:draw()
- Blits the background track
- Draws the green 'fill' in
- Blits a copy of the original handle for each handle on the slider
- Draws the text values next to them

(I apologize if the Slider class has been updated at some point and no longer
works that way by the time you read this)

There are more complicated ways to use blitting such as scaling, rotation,
cropping, and different blending modes. See the ReaScript API's gfx functions.




Most classes will also need a way to return their value, or have a new value
assigned to them. In some cases this can be done directly, like so:
	
	local label_caption = GUI.elms.my_label.retval
	GUI.elms.my_label.retval = "Ha! I changed the text!"
	
but many classes will want to do some processing to convert their internal
parameters to a human-readable string, and vice versa. In this case, use:

	function GUI.Thing:val(newval)
	
		if newval then
	
			self.retval = (newval - self.min_value) / (self.number_of_values)
			
		else
		
			return ((self.retval * self.number_of_values) + self.min_value)
			
		end
	
	end
	
All elements' :val() methods can be accessed via GUI.Val():

	-- Get the value
	local thing_value = GUI.Val("my_thing")
	
	-- Set a new one
	GUI.Val("my_thing", 12)




Another thing most classes might need is a way to respond to the user's input.
We'll use :onclick as an example.

	function GUI.Thing:onclick()
	
		local x_val = (GUI.mouse.x - self.x) / self.w
		local y_val = (GUI.mouse.y - self.y) / self.h
		
		self.caption("x_val = "..x_val.."\ny_val = "..y_val)
		
		GUI.redraw_z[self.z] = true
	
	end

Note the last line there, and remember that elements are only redrawn if their
z layer is told to redraw. If the method didn't include that line, the new
caption would never be displayed because the GUI would just keep blitting the
previous copy.




Classes are by no means limited to these methods. I think GUI.Thing:new()
is the only one that might cause problems in its absence, and you can also add
your own, particularly for complicated class behaviors that just don't fit nicely
in the existing methods. The Label class' :fade method is one example.

***
For a full list of the methods provided by Lokasenna_GUI, see the comments 
for GUI.Element in 'Core.lua'.
***
